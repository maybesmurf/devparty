datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation", "selectRelationCount", "nApi", "referentialActions", "orderByAggregateGroup", "filterJson"]
}

model User {
  id             String @id @default(uuid())
  username       String @unique @default(uuid())
  email          String @unique
  hashedPassword String

  // Flags
  spammy     Boolean @default(false)
  isVerified Boolean @default(false)
  isStaff    Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts      Post[]
  sessions   Session[]
  profile    Profile?
  following  User[]    @relation("follows")
  followedBy User[]    @relation("follows")
  likes      Like[]
}

model Session {
  id String @id @default(uuid())

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Profile {
  id       String  @id @default(uuid())
  name     String
  avatar   String?
  cover    String?
  bio      String?
  location String?
  website  String?
  discord  String?
  github   String?
  twitter  String?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Attributes
  @@index([userId])
}

model Post {
  id          String   @id @default(uuid())
  title       String?
  body        String
  done        Boolean  @default(false)
  type        PostType @default(POST)
  attachments Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
  likes  Like[]

  // Attributes
  @@index([userId])
}

enum PostType {
  POST
  TASK
  QUESTION
}

model Like {
  id String @id @default(uuid())

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  userId String
  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  // Attributes
  @@unique([userId, postId], name: "postLikeIdentifier")
}
