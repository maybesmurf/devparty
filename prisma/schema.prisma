datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["filterJson", "referentialIntegrity"]
}

generator giraphql {
  provider = "prisma-giraphql-types"
}

model User {
  id             String @id @default(cuid())
  username       String @unique @default(cuid())
  email          String @unique
  hashedPassword String

  // Flags
  spammy     Boolean @default(false)
  isVerified Boolean @default(false)
  isStaff    Boolean @default(false)
  inWaitlist Boolean @default(true)

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  featuredAt DateTime?

  // Relations
  posts                  Post[]
  ownedProducts          Product[]      @relation("owner")
  subscribedProducts     Product[]      @relation("subscribed")
  sessions               Session[]
  profile                Profile?
  tip                    Tip?
  invite                 Invite?
  integrations           Integration?
  likes                  Like[]
  badges                 Badge[]
  topics                 Topic[]
  logs                   Log[]
  following              User[]         @relation("follows")
  followedBy             User[]         @relation("follows")
  receivedNotification   Notification[] @relation("notificationReceiver")
  dispatchedNotification Notification[] @relation("notificationDispatcher")
  receivedMessages       Message[]      @relation("messageReceiver")
  sentMessages           Message[]      @relation("messageSender")

  // Attributes
  @@map("users")
}

model Session {
  id        String  @id @default(cuid())
  isStaff   Boolean @default(false)
  ipAddress String?
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Attributes
  @@map("sessions")
}

model Profile {
  id       String  @id @default(cuid())
  name     String
  avatar   String?
  cover    String?
  bio      String?
  location String?
  website  String?
  discord  String?
  github   String?
  twitter  String?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // Attributes
  @@map("profiles")
}

model Invite {
  id        String  @id @default(cuid())
  code      String?
  usedTimes Int     @default(0)

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // Attributes
  @@map("invites")
}

model Tip {
  id           String  @id @default(cuid())
  cash         String?
  paypal       String?
  github       String?
  buymeacoffee String?
  bitcoin      String?
  ethereum     String?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // Attributes
  @@map("tips")
}

model Post {
  id          String   @id @default(cuid())
  title       String?
  body        String   @db.Text
  done        Boolean  @default(false)
  type        PostType @default(POST)
  attachments Json?
  hidden      Boolean  @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  likes     Like[]
  topics    PostTopic[]

  parentId String?
  parent   Post?   @relation("replies", fields: [parentId], references: [id], onDelete: SetNull)
  replies  Post[]  @relation("replies")

  // Attributes
  @@map("posts")
}

model PostTopic {
  id String @id @default(cuid())

  // Relations
  post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String?
  topic   Topic?  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String?

  // Attributes
  @@map("post_topics")
}

model Topic {
  id          String  @id @default(cuid())
  name        String  @unique
  image       String?
  description String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  posts    PostTopic[]
  starrers User[]

  // Attributes
  @@map("topics")
}

model Like {
  id String @id @default(cuid())

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  post         Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String?
  notification Notification[] @relation("like")

  // Attributes
  @@unique([userId, postId], name: "likeIdentifier")
  @@map("likes")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  avatar      String?

  // Social
  website     String?
  producthunt String?
  discord     String?
  github      String?
  twitter     String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner        User?          @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String?
  subscribers  User[]         @relation("subscribed")
  posts        Post[]
  notification Notification[] @relation("product")

  // Attributes
  @@map("products")
}

model Badge {
  id          String  @id @default(cuid())
  name        String
  image       String
  description String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]

  // Attributes
  @@map("badges")
}

model Notification {
  id       String           @id @default(cuid())
  message  String?
  isRead   Boolean          @default(false)
  type     NotificationType
  entityId String           @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  receiver     User     @relation("notificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId   String
  dispatcher   User     @relation("notificationDispatcher", fields: [dispatcherId], references: [id], onDelete: Cascade)
  dispatcherId String
  like         Like?    @relation("like", fields: [likeId], references: [id], onDelete: Cascade)
  likeId       String?
  product      Product? @relation("product", fields: [productId], references: [id], onDelete: Cascade)
  productId    String?

  // Attributes
  @@map("notifications")
}

model Integration {
  id                  String  @id @default(cuid())
  wakatimeAPIKey      String?
  spotifyRefreshToken String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Attributes
  @@map("integrations")
}

model Log {
  id        String        @id @default(cuid())
  action    LogActionType
  entityId  String?
  ipAddress String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String

  // Attributes
  @@map("logs")
}

model Message {
  id      String @id @default(cuid())
  message String

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  sender     User   @relation("messageSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User   @relation("messageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  // Attributes
  @@map("messages")
}

// Types
enum PostType {
  POST
  TASK
  QUESTION
  REPLY
}

enum NotificationType {
  // Post
  POST_LIKE
  POST_REPLY

  // User
  USER_MENTION
  USER_FOLLOW

  // Product
  PRODUCT_SUBSCRIBE
}

enum LogActionType {
  POST_LIKE
}
