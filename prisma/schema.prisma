datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  planetScaleMode   = true
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["filterJson", "planetScaleMode"]
}

generator giraphql {
  provider = "prisma-giraphql-types"
}

model User {
  id             String @id @default(cuid())
  username       String @unique @default(cuid())
  email          String @unique
  hashedPassword String

  // Flags
  spammy     Boolean @default(false)
  isVerified Boolean @default(false)
  isStaff    Boolean @default(false)
  inWaitlist Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts            Post[]
  products         Product[]
  communities      Community[]
  sessions         Session[]
  profile          Profile?
  invite           Invite?
  integrations     Integration?
  likes            Like[]
  badges           Badge[]
  topics           Topic[]
  following        User[]         @relation("follows")
  followedBy       User[]         @relation("follows")
  myNotification   Notification[] @relation("receiver")
  sentNotification Notification[] @relation("dispatcher")

  // Attributes
  @@index([username, email])
  @@map("users")
}

model Session {
  id        String  @id @default(cuid())
  isStaff   Boolean @default(false)
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Attributes
  @@index([userAgent, userId])
  @@map("sessions")
}

model Profile {
  id       String  @id @default(cuid())
  name     String
  avatar   String?
  cover    String?
  bio      String?
  location String?
  website  String?
  discord  String?
  github   String?
  twitter  String?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Attributes
  @@index([userId])
  @@map("profiles")
}

model Invite {
  id        String  @id @default(uuid())
  code      String?
  usedTimes Int     @default(0)

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Attributes
  @@index([code, userId])
  @@map("invites")
}

model Post {
  id          String   @id @default(cuid())
  title       String?
  body        String
  done        Boolean  @default(false)
  type        PostType @default(POST)
  attachments Json?
  hidden      Boolean  @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  product   Product?    @relation(fields: [productId], references: [id])
  productId String?
  likes     Like[]
  topics    PostTopic[]

  parentId String?
  parent   Post?   @relation("replies", fields: [parentId], references: [id])
  replies  Post[]  @relation("replies")

  // Attributes
  @@index([userId, productId, parentId])
  @@map("posts")
}

model PostTopic {
  id String @id @default(cuid())

  // Relations
  post    Post?   @relation(fields: [postId], references: [id])
  postId  String?
  topic   Topic?  @relation(fields: [topicId], references: [id])
  topicId String?

  // Attributes
  @@index([postId, topicId])
  @@map("post_topics")
}

model Topic {
  id          String  @id @default(cuid())
  name        String  @unique
  image       String?
  description String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  posts PostTopic[]
  users User[]

  // Attributes
  @@index([name])
  @@map("topics")
}

model Like {
  id String @id @default(cuid())

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  post         Post?          @relation(fields: [postId], references: [id])
  postId       String?
  notification Notification[] @relation("like")

  // Attributes
  @@unique([userId, postId], name: "likeIdentifier")
  @@index([postId, userId])
  @@map("likes")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  avatar      String?

  // Social
  website     String?
  producthunt String?
  discord     String?
  github      String?
  twitter     String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  posts  Post[]

  // Attributes
  @@index([slug, userId])
  @@map("products")
}

model Community {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  avatar      String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]

  // Attributes
  @@index([slug])
  @@map("communities")
}

model Badge {
  id          String  @id @default(cuid())
  name        String
  image       String
  description String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users User[]

  // Attributes
  @@map("badges")
}

model Notification {
  id      String           @id @default(cuid())
  message String?
  type    NotificationType

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  receiver     User    @relation("receiver", fields: [receiverId], references: [id])
  receiverId   String
  dispatcher   User    @relation("dispatcher", fields: [dispatcherId], references: [id])
  dispatcherId String
  like         Like?   @relation("like", fields: [likeId], references: [id])
  likeId       String?

  // Attributes
  @@index([receiverId, dispatcherId, likeId])
  @@map("notifications")
}

model Integration {
  id                  String  @id @default(uuid())
  wakatimeAPIKey      String?
  spotifyRefreshToken String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Attributes
  @@index([userId])
  @@map("integrations")
}

// Types
enum PostType {
  POST
  TASK
  QUESTION
  REPLY
}

enum NotificationType {
  POSTLIKE
  FOLLOW
}
