scalar Attachments

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreatePostInput {
  attachments: String
  body: String!
  done: Boolean! = true
  title: String
  type: String! = "POST"
}

scalar DateTime

input DeletePostInput {
  id: ID!
}

input EditPostInput {
  body: String
  done: Boolean
  id: ID!
}

input EditUserInput {
  bio: String!
  email: String!
  location: String
  name: String!
  username: String!
}

type Like {
  createdAt: DateTime!
  id: ID!
  post: Post!
  updatedAt: DateTime!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): Result!
  createPost(input: CreatePostInput!): Post!
  deletePost(input: DeletePostInput!): Post!
  editPost(input: EditPostInput!): Post!
  editUser(input: EditUserInput!): User!
  login(input: LoginInput!): User!
  logout: Result!
  signUp(input: SignUpInput!): User!
  toggleLike(input: ToggleLikeInput!): Post
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  attachments: Attachments
  body: String!
  createdAt: DateTime!
  done: Boolean!
  hasLiked: Boolean!
  id: ID!
  likes(after: String, before: String, first: Int, last: Int): PostLikesConnection!
  likesCount: Int!
  title: String
  type: String!
  updatedAt: DateTime!
  user: User!
}

type PostLikesConnection {
  edges: [PostLikesConnectionEdge]!
  pageInfo: PageInfo!
}

type PostLikesConnectionEdge {
  cursor: String!
  node: Like!
}

type Profile {
  avatar: String
  bio: String
  cover: String
  discord: String
  github: String
  id: ID!
  location: String
  name: String!
  twitter: String
  website: String
}

type Query {
  me: User
  post(id: ID!): Post!
  posts(after: String, before: String, first: Int, last: Int, where: WherePostsInput): QueryPostsConnection!
  user(username: String!): User!
  users: [User!]!
}

type QueryPostsConnection {
  edges: [QueryPostsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryPostsConnectionEdge {
  cursor: String!
  node: Post!
}

enum Result {
  SUCCESS
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

input ToggleLikeInput {
  postId: ID!
}

type User {
  email: String
  id: ID!
  isStaff: Boolean!
  isVerified: Boolean!
  profile: Profile!
  spammy: Boolean!
  username: String!
}

input WherePostsInput {
  type: String
  userId: String
}
