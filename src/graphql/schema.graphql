input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreatePostInput {
  body: String!
  done: Boolean! = true
  title: String
  type: String! = "POST"
}

scalar DateTime

input DeletePostInput {
  id: ID!
}

input EditPostInput {
  body: String
  done: Boolean
  id: ID!
}

input EditUserInput {
  username: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): Result!
  createPost(input: CreatePostInput!): Post!
  deletePost(input: DeletePostInput!): Post!
  editPost(input: EditPostInput!): Post!
  editUser(input: EditUserInput!): User!
  login(input: LoginInput!): User!
  logout: Result!
  signUp(input: SignUpInput!): User!
}

type Post {
  body: String!
  createdAt: DateTime!
  done: Boolean!
  id: ID!
  title: String
  type: String!
  updatedAt: DateTime!
  user: User
}

type Profile {
  avatar: String
  bio: String
  id: ID!
  name: String!
}

type Query {
  me: User
  post(id: ID!): Post!
  posts: [Post!]!
  user(username: String!): User!
  users(take: Int!): [User!]!
}

enum Result {
  SUCCESS
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

type User {
  id: ID!
  profile: Profile
  username: String!
}
