input AnswerPollInput {
  id: ID!
}

input AttachBadgeToUserInput {
  badgeId: ID!
  userId: ID!
}

scalar Attachments

type Badge {
  description: String
  id: ID!
  image: String!
  name: String!
  users(after: String, before: String, first: Int, last: Int): BadgeUsersConnection!
}

type BadgeUsersConnection {
  edges: [BadgeUsersConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BadgeUsersConnectionEdge {
  cursor: String!
  node: User!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateBadgeInput {
  description: String!
  image: String!
  name: String!
}

input CreatePostInput {
  address: String
  attachments: String
  body: String!
  done: Boolean! = true
  parentId: ID
  polls: String
  productId: ID
  title: String
  tokenId: String
  type: String! = "POST"
}

input CreateProductInput {
  description: String
  name: String!
  slug: String!
  website: String!
}

scalar DateTime

input DeletePostInput {
  id: ID!
}

input EditIntegrationInput {
  spotifyRefreshToken: String
  wakatimeAPIKey: String
}

input EditNFTAvatarInput {
  avatar: String!
  nftSource: String!
}

input EditPostInput {
  body: String
  done: Boolean
  id: ID!
}

input EditProductInput {
  avatar: String
  description: String
  id: ID!
  name: String!
  slug: String!
}

input EditSocialInput {
  discord: String
  github: String
  twitter: String
  website: String
}

input EditTipsInput {
  bitcoin: String
  buymeacoffee: String
  cash: String
  ethereum: String
  github: String
  paypal: String
}

input EditTopicInput {
  description: String
  id: ID!
}

input EditUserInput {
  avatar: String!
  bio: String
  cover: String!
  location: String
  name: String!
  username: String!
}

type Integration {
  id: ID!
  spotifyRefreshToken: String
  wakatimeAPIKey: String
}

type Invite {
  code: String
  id: ID!
  usedTimes: Int
  user: User!
}

input JoinWaitlistInput {
  email: String!
  password: String!
  username: String!
}

type Like {
  id: ID!
  post: Post!
  user: User!
}

type Log {
  action: String!
  createdAt: DateTime!
  entityId: String
  id: ID!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

input ModUserInput {
  isStaff: Boolean
  isVerified: Boolean
  spammy: Boolean
  userId: ID!
}

type Mutation {
  answerPoll(input: AnswerPollInput!): PollAnswer
  attachBadge(input: AttachBadgeToUserInput!): User!
  changePassword(input: ChangePasswordInput!): Result!
  createBadge(input: CreateBadgeInput!): Badge!
  createPost(input: CreatePostInput!): Post!
  createProduct(input: CreateProductInput!): Product!
  deletePost(input: DeletePostInput!): Result!
  editIntegration(input: EditIntegrationInput!): Integration!
  editNFTAvatar(input: EditNFTAvatarInput!): User!
  editPost(input: EditPostInput!): Post!
  editProduct(input: EditProductInput!): Product
  editSocial(input: EditSocialInput!): User!
  editTips(input: EditTipsInput!): Tip!
  editUser(input: EditUserInput!): User!
  joinWaitlist(input: JoinWaitlistInput!): User!
  login(input: LoginInput!): User!
  modTopic(input: EditTopicInput!): Topic
  modUser(input: ModUserInput!): User
  onboardUser(input: OnboardUserInput!): User
  readNotification(input: ReadNotificationInput!): Result!
  regenerateInvite: Invite!
  revokeSession(input: RevokeSessionInput!): Result!
  signUp(input: SignupInput!): User!
  toggleFollow(input: ToggleFollowInput!): User
  togglePostLike(input: TogglePostLikeInput!): Post
  toggleProductSubscribe(input: ToggleProductSubscribeInput!): Product
  toggleTopicStar(input: ToggleTopicStarInput!): Topic
}

type Notification {
  createdAt: DateTime!
  dispatcher: User!
  id: ID!
  like: Like
  post: Post
  product: Product
  receiver: User!
  type: String!
  updatedAt: DateTime!
}

input OnboardUserInput {
  userId: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Poll {
  answers: [PollAnswer!]!
  hasVoted: Boolean!
  id: ID!
  post: Post!
  totalCount: Int!
}

type PollAnswer {
  hasAnswered: Boolean!
  id: ID!
  poll: Poll!
  title: String!
  voters(after: String, before: String, first: Int, last: Int): PollAnswerVotersConnection!
}

type PollAnswerVotersConnection {
  edges: [PollAnswerVotersConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PollAnswerVotersConnectionEdge {
  cursor: String!
  node: User!
}

type Post {
  attachments: Attachments
  body: String!
  createdAt: DateTime!
  done: Boolean!
  hasLiked: Boolean!
  id: ID!
  likes(after: String, before: String, first: Int, last: Int): PostLikesConnection!
  oembedUrl: String
  parent: Post
  poll: Poll
  product: Product
  replies(after: String, before: String, first: Int, last: Int): PostRepliesConnection!
  title: String
  type: String!
  updatedAt: DateTime!
  user: User!
}

type PostLikesConnection {
  edges: [PostLikesConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostLikesConnectionEdge {
  cursor: String!
  node: Like!
}

type PostRepliesConnection {
  edges: [PostRepliesConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostRepliesConnectionEdge {
  cursor: String!
  node: Post!
}

type Product {
  avatar: String
  createdAt: DateTime!
  description: String
  discord: String
  github: String
  hasSubscribed: Boolean!
  id: ID!
  name: String!
  owner: User!
  posts(after: String, before: String, first: Int, last: Int): ProductPostsConnection!
  producthunt: String
  slug: String!
  twitter: String
  updatedAt: DateTime!
  website: String
}

type ProductPostsConnection {
  edges: [ProductPostsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductPostsConnectionEdge {
  cursor: String!
  node: Post!
}

type Profile {
  avatar: String!
  bio: String
  cover: String!
  coverBg: String!
  discord: String
  github: String
  id: ID!
  location: String
  name: String!
  nftSource: String
  twitter: String
  website: String
}

type Query {
  badges(after: String, before: String, first: Int, last: Int): QueryBadgesConnection!
  exploreFeed(after: String, before: String, first: Int, last: Int): QueryExploreFeedConnection!
  homeFeed(after: String, before: String, first: Int, last: Int, type: String! = "ALL"): QueryHomeFeedConnection!
  integration(userId: ID): Integration
  invite(code: String!): Invite
  logs(after: String, before: String, first: Int, last: Int): QueryLogsConnection!
  me: User
  morePostsByUser(after: String, before: String, first: Int, last: Int, type: String!, userId: ID!): QueryMorePostsByUserConnection!
  notifications(after: String, before: String, first: Int, isRead: Boolean! = false, last: Int): QueryNotificationsConnection!
  post(id: ID!): Post!
  product(slug: String!): Product!
  products(after: String, before: String, first: Int, last: Int): QueryProductsConnection!
  searchPosts(after: String, before: String, first: Int, keyword: String!, last: Int): QuerySearchPostsConnection!
  searchProduct(after: String, before: String, first: Int, keyword: String!, last: Int): QuerySearchProductConnection!
  searchUsers(after: String, before: String, first: Int, keyword: String!, last: Int): QuerySearchUsersConnection!
  sessions(after: String, before: String, first: Int, last: Int): QuerySessionsConnection
  spotify(userId: ID!): Spotify
  stats: Stats
  topic(name: String!): Topic!
  user(username: String!): User
  users(after: String, before: String, first: Int, last: Int): QueryUsersConnection!
  wakatime(userId: ID!): Wakatime
  whoToFollow(after: String, before: String, first: Int, last: Int): QueryWhoToFollowConnection!
}

type QueryBadgesConnection {
  edges: [QueryBadgesConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryBadgesConnectionEdge {
  cursor: String!
  node: Badge!
}

type QueryExploreFeedConnection {
  edges: [QueryExploreFeedConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryExploreFeedConnectionEdge {
  cursor: String!
  node: Post!
}

type QueryHomeFeedConnection {
  edges: [QueryHomeFeedConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryHomeFeedConnectionEdge {
  cursor: String!
  node: Post!
}

type QueryLogsConnection {
  edges: [QueryLogsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryLogsConnectionEdge {
  cursor: String!
  node: Log!
}

type QueryMorePostsByUserConnection {
  edges: [QueryMorePostsByUserConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryMorePostsByUserConnectionEdge {
  cursor: String!
  node: Post!
}

type QueryNotificationsConnection {
  edges: [QueryNotificationsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryNotificationsConnectionEdge {
  cursor: String!
  node: Notification!
}

type QueryProductsConnection {
  edges: [QueryProductsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryProductsConnectionEdge {
  cursor: String!
  node: Product!
}

type QuerySearchPostsConnection {
  edges: [QuerySearchPostsConnectionEdge]!
  pageInfo: PageInfo!
}

type QuerySearchPostsConnectionEdge {
  cursor: String!
  node: Post!
}

type QuerySearchProductConnection {
  edges: [QuerySearchProductConnectionEdge]!
  pageInfo: PageInfo!
}

type QuerySearchProductConnectionEdge {
  cursor: String!
  node: Product!
}

type QuerySearchUsersConnection {
  edges: [QuerySearchUsersConnectionEdge]!
  pageInfo: PageInfo!
}

type QuerySearchUsersConnectionEdge {
  cursor: String!
  node: User!
}

type QuerySessionsConnection {
  edges: [QuerySessionsConnectionEdge]!
  pageInfo: PageInfo!
}

type QuerySessionsConnectionEdge {
  cursor: String!
  node: Session!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User!
}

type QueryWhoToFollowConnection {
  edges: [QueryWhoToFollowConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryWhoToFollowConnectionEdge {
  cursor: String!
  node: User!
}

input ReadNotificationInput {
  id: ID!
}

enum Result {
  SUCCESS
}

input RevokeSessionInput {
  id: ID!
}

type Session {
  createdAt: DateTime!
  current: Boolean!
  expiresAt: DateTime!
  id: ID!
  ipAddress: String
  isStaff: Boolean!
  user: User!
  userAgent: String
}

input SignupInput {
  email: String!
  invite: String!
  password: String!
  username: String!
}

type Spotify {
  artist: String
  image: String
  isPlaying: Boolean
  name: String
  url: String
}

type Stats {
  badges: Int!
  likes: Int!
  notifications: Int!
  posts: Int!
  products: Int!
  sessions: Int!
  topics: Int!
  users: Int!
}

type Tip {
  bitcoin: String
  buymeacoffee: String
  cash: String
  ethereum: String
  github: String
  id: ID!
  paypal: String
  user: User!
}

input ToggleFollowInput {
  userId: ID!
}

input TogglePostLikeInput {
  id: ID!
}

input ToggleProductSubscribeInput {
  id: ID!
}

input ToggleTopicStarInput {
  id: ID!
}

type Topic {
  description: String
  hasStarted: Boolean!
  id: ID!
  image: String
  name: String!
  posts(after: String, before: String, first: Int, last: Int): TopicPostsConnection!
  postsCount: Int!
  starrers(after: String, before: String, first: Int, last: Int): TopicStarrersConnection!
}

type TopicPostsConnection {
  edges: [TopicPostsConnectionEdge]!
  pageInfo: PageInfo!
}

type TopicPostsConnectionEdge {
  cursor: String!
  node: Post!
}

type TopicStarrersConnection {
  edges: [TopicStarrersConnectionEdge]!
  pageInfo: PageInfo!
}

type TopicStarrersConnectionEdge {
  cursor: String!
  node: User!
}

type User {
  badges(after: String, before: String, first: Int, last: Int): UserBadgesConnection!
  createdAt: DateTime!
  email: String!
  followers(after: String, before: String, first: Int, last: Int): UserFollowersConnection!
  following(after: String, before: String, first: Int, last: Int): UserFollowingConnection!
  hasFollowed: Boolean!
  hasSpotifyIntegration: Boolean!
  hasWakatimeIntegration: Boolean!
  id: ID!
  inWaitlist: Boolean!
  integrations: Integration
  invite: Invite
  isFollowing: Boolean!
  isStaff: Boolean!
  isVerified: Boolean!
  notificationsCount: Int!
  ownedProducts(after: String, before: String, first: Int, last: Int): UserOwnedProductsConnection!
  posts(after: String, before: String, first: Int, last: Int): UserPostsConnection!
  profile: Profile!
  spammy: Boolean!
  tip: Tip
  topics(after: String, before: String, first: Int, last: Int): UserTopicsConnection!
  updatedAt: DateTime!
  username: String!
}

type UserBadgesConnection {
  edges: [UserBadgesConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserBadgesConnectionEdge {
  cursor: String!
  node: Badge!
}

type UserFollowersConnection {
  edges: [UserFollowersConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserFollowersConnectionEdge {
  cursor: String!
  node: User!
}

type UserFollowingConnection {
  edges: [UserFollowingConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserFollowingConnectionEdge {
  cursor: String!
  node: User!
}

type UserOwnedProductsConnection {
  edges: [UserOwnedProductsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserOwnedProductsConnectionEdge {
  cursor: String!
  node: Product!
}

type UserPostsConnection {
  edges: [UserPostsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserPostsConnectionEdge {
  cursor: String!
  node: Post!
}

type UserTopicsConnection {
  edges: [UserTopicsConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserTopicsConnectionEdge {
  cursor: String!
  node: Topic!
}

type Wakatime {
  hours: String
}
